/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as AppSettingsIndexImport } from './routes/_app/settings/index'
import { Route as AppHomeIndexImport } from './routes/_app/home/index'
import { Route as AppDashboardMonitorIndexImport } from './routes/_app/dashboard/monitor/index'
import { Route as AppDashboardConsoleIndexImport } from './routes/_app/dashboard/console/index'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppSettingsIndexRoute = AppSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRoute,
} as any)

const AppHomeIndexRoute = AppHomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => AppRoute,
} as any)

const AppDashboardMonitorIndexRoute = AppDashboardMonitorIndexImport.update({
  id: '/dashboard/monitor/',
  path: '/dashboard/monitor/',
  getParentRoute: () => AppRoute,
} as any)

const AppDashboardConsoleIndexRoute = AppDashboardConsoleIndexImport.update({
  id: '/dashboard/console/',
  path: '/dashboard/console/',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/home/': {
      id: '/_app/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/settings/': {
      id: '/_app/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/dashboard/console/': {
      id: '/_app/dashboard/console/'
      path: '/dashboard/console'
      fullPath: '/dashboard/console'
      preLoaderRoute: typeof AppDashboardConsoleIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/dashboard/monitor/': {
      id: '/_app/dashboard/monitor/'
      path: '/dashboard/monitor'
      fullPath: '/dashboard/monitor'
      preLoaderRoute: typeof AppDashboardMonitorIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppHomeIndexRoute: typeof AppHomeIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
  AppDashboardConsoleIndexRoute: typeof AppDashboardConsoleIndexRoute
  AppDashboardMonitorIndexRoute: typeof AppDashboardMonitorIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppHomeIndexRoute: AppHomeIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
  AppDashboardConsoleIndexRoute: AppDashboardConsoleIndexRoute,
  AppDashboardMonitorIndexRoute: AppDashboardMonitorIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/': typeof AppIndexRoute
  '/home': typeof AppHomeIndexRoute
  '/settings': typeof AppSettingsIndexRoute
  '/dashboard/console': typeof AppDashboardConsoleIndexRoute
  '/dashboard/monitor': typeof AppDashboardMonitorIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof AppIndexRoute
  '/home': typeof AppHomeIndexRoute
  '/settings': typeof AppSettingsIndexRoute
  '/dashboard/console': typeof AppDashboardConsoleIndexRoute
  '/dashboard/monitor': typeof AppDashboardMonitorIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/': typeof AppIndexRoute
  '/_app/home/': typeof AppHomeIndexRoute
  '/_app/settings/': typeof AppSettingsIndexRoute
  '/_app/dashboard/console/': typeof AppDashboardConsoleIndexRoute
  '/_app/dashboard/monitor/': typeof AppDashboardMonitorIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/home'
    | '/settings'
    | '/dashboard/console'
    | '/dashboard/monitor'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/settings' | '/dashboard/console' | '/dashboard/monitor'
  id:
    | '__root__'
    | '/_app'
    | '/_app/'
    | '/_app/home/'
    | '/_app/settings/'
    | '/_app/dashboard/console/'
    | '/_app/dashboard/monitor/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/",
        "/_app/home/",
        "/_app/settings/",
        "/_app/dashboard/console/",
        "/_app/dashboard/monitor/"
      ]
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/home/": {
      "filePath": "_app/home/index.tsx",
      "parent": "/_app"
    },
    "/_app/settings/": {
      "filePath": "_app/settings/index.tsx",
      "parent": "/_app"
    },
    "/_app/dashboard/console/": {
      "filePath": "_app/dashboard/console/index.tsx",
      "parent": "/_app"
    },
    "/_app/dashboard/monitor/": {
      "filePath": "_app/dashboard/monitor/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
